// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @unique @default(uuid())
  name          String
  username      String  @unique
  password      String
  email         String  @unique
  role          Role 
  admin         Admin?
  student       Student?
  teacher       Teacher?
  status        Status @default(active)
  refreshTokens RefreshToken[]
  gender        String 
  phoneNumber   String
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RefreshToken {
  id          String   @id @default(uuid())
  hashedToken String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  device      String?
  ip          String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expireAt    DateTime
}


model Admin {
  id      Int    @id @default(autoincrement())
  user    User @relation(fields: [userId], references: [id])
  userId  String  @unique
  nip     String
  nuptk   String
}

model Teacher {
  id      Int    @id @default(autoincrement())
  user    User @relation(fields: [userId], references: [id])
  userId  String  @unique
  nip     String
  nuptk   String
}


model Student {
   id      Int    @id @default(autoincrement())
   user    User @relation(fields: [userId], references: [id])
   userId  String  @unique
   class Class @relation(fields: [classId], references: [id])
   classId Int  
   nis String
   nisn String
}

model Class {
   id      Int    @id @default(autoincrement())
   name String
   student Student[]
}


enum Role {
  admin
  teacher
  student
}

enum Status {
  active
  inactive
}
